// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActivePoolAddressChanged extends ethereum.Event {
  get params(): ActivePoolAddressChanged__Params {
    return new ActivePoolAddressChanged__Params(this);
  }
}

export class ActivePoolAddressChanged__Params {
  _event: ActivePoolAddressChanged;

  constructor(event: ActivePoolAddressChanged) {
    this._event = event;
  }

  get _activePoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BaseRateUpdated extends ethereum.Event {
  get params(): BaseRateUpdated__Params {
    return new BaseRateUpdated__Params(this);
  }
}

export class BaseRateUpdated__Params {
  _event: BaseRateUpdated;

  constructor(event: BaseRateUpdated) {
    this._event = event;
  }

  get _baseRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BorrowerOperationsAddressChanged extends ethereum.Event {
  get params(): BorrowerOperationsAddressChanged__Params {
    return new BorrowerOperationsAddressChanged__Params(this);
  }
}

export class BorrowerOperationsAddressChanged__Params {
  _event: BorrowerOperationsAddressChanged;

  constructor(event: BorrowerOperationsAddressChanged) {
    this._event = event;
  }

  get _newBorrowerOperationsAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollSurplusPoolAddressChanged extends ethereum.Event {
  get params(): CollSurplusPoolAddressChanged__Params {
    return new CollSurplusPoolAddressChanged__Params(this);
  }
}

export class CollSurplusPoolAddressChanged__Params {
  _event: CollSurplusPoolAddressChanged;

  constructor(event: CollSurplusPoolAddressChanged) {
    this._event = event;
  }

  get _collSurplusPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DefaultPoolAddressChanged extends ethereum.Event {
  get params(): DefaultPoolAddressChanged__Params {
    return new DefaultPoolAddressChanged__Params(this);
  }
}

export class DefaultPoolAddressChanged__Params {
  _event: DefaultPoolAddressChanged;

  constructor(event: DefaultPoolAddressChanged) {
    this._event = event;
  }

  get _defaultPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GasPoolAddressChanged extends ethereum.Event {
  get params(): GasPoolAddressChanged__Params {
    return new GasPoolAddressChanged__Params(this);
  }
}

export class GasPoolAddressChanged__Params {
  _event: GasPoolAddressChanged;

  constructor(event: GasPoolAddressChanged) {
    this._event = event;
  }

  get _gasPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LTermsUpdated extends ethereum.Event {
  get params(): LTermsUpdated__Params {
    return new LTermsUpdated__Params(this);
  }
}

export class LTermsUpdated__Params {
  _event: LTermsUpdated;

  constructor(event: LTermsUpdated) {
    this._event = event;
  }

  get _Coll_Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _L_Coll(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _L_YUSDDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LTermsUpdated1 extends ethereum.Event {
  get params(): LTermsUpdated1__Params {
    return new LTermsUpdated1__Params(this);
  }
}

export class LTermsUpdated1__Params {
  _event: LTermsUpdated1;

  constructor(event: LTermsUpdated1) {
    this._event = event;
  }

  get _L_ETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _L_YUSDDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LastFeeOpTimeUpdated extends ethereum.Event {
  get params(): LastFeeOpTimeUpdated__Params {
    return new LastFeeOpTimeUpdated__Params(this);
  }
}

export class LastFeeOpTimeUpdated__Params {
  _event: LastFeeOpTimeUpdated;

  constructor(event: LastFeeOpTimeUpdated) {
    this._event = event;
  }

  get _lastFeeOpTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Liquidation extends ethereum.Event {
  get params(): Liquidation__Params {
    return new Liquidation__Params(this);
  }
}

export class Liquidation__Params {
  _event: Liquidation;

  constructor(event: Liquidation) {
    this._event = event;
  }

  get liquidatedAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalYUSDGasCompensation(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalCollTokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get totalCollAmounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get totalCollGasCompTokens(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }

  get totalCollGasCompAmounts(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PriceFeedAddressChanged extends ethereum.Event {
  get params(): PriceFeedAddressChanged__Params {
    return new PriceFeedAddressChanged__Params(this);
  }
}

export class PriceFeedAddressChanged__Params {
  _event: PriceFeedAddressChanged;

  constructor(event: PriceFeedAddressChanged) {
    this._event = event;
  }

  get _newPriceFeedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Redemption extends ethereum.Event {
  get params(): Redemption__Params {
    return new Redemption__Params(this);
  }
}

export class Redemption__Params {
  _event: Redemption;

  constructor(event: Redemption) {
    this._event = event;
  }

  get _attemptedYUSDAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _actualYUSDAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get YUSDfee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class SYETIAddressChanged extends ethereum.Event {
  get params(): SYETIAddressChanged__Params {
    return new SYETIAddressChanged__Params(this);
  }
}

export class SYETIAddressChanged__Params {
  _event: SYETIAddressChanged;

  constructor(event: SYETIAddressChanged) {
    this._event = event;
  }

  get _sYETIAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SortedTrovesAddressChanged extends ethereum.Event {
  get params(): SortedTrovesAddressChanged__Params {
    return new SortedTrovesAddressChanged__Params(this);
  }
}

export class SortedTrovesAddressChanged__Params {
  _event: SortedTrovesAddressChanged;

  constructor(event: SortedTrovesAddressChanged) {
    this._event = event;
  }

  get _sortedTrovesAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StabilityPoolAddressChanged extends ethereum.Event {
  get params(): StabilityPoolAddressChanged__Params {
    return new StabilityPoolAddressChanged__Params(this);
  }
}

export class StabilityPoolAddressChanged__Params {
  _event: StabilityPoolAddressChanged;

  constructor(event: StabilityPoolAddressChanged) {
    this._event = event;
  }

  get _stabilityPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SystemSnapshotsUpdated extends ethereum.Event {
  get params(): SystemSnapshotsUpdated__Params {
    return new SystemSnapshotsUpdated__Params(this);
  }
}

export class SystemSnapshotsUpdated__Params {
  _event: SystemSnapshotsUpdated;

  constructor(event: SystemSnapshotsUpdated) {
    this._event = event;
  }

  get _unix(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SystemSnapshotsUpdated1 extends ethereum.Event {
  get params(): SystemSnapshotsUpdated1__Params {
    return new SystemSnapshotsUpdated1__Params(this);
  }
}

export class SystemSnapshotsUpdated1__Params {
  _event: SystemSnapshotsUpdated1;

  constructor(event: SystemSnapshotsUpdated1) {
    this._event = event;
  }

  get _totalStakesSnapshot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _totalCollateralSnapshot(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TotalStakesUpdated extends ethereum.Event {
  get params(): TotalStakesUpdated__Params {
    return new TotalStakesUpdated__Params(this);
  }
}

export class TotalStakesUpdated__Params {
  _event: TotalStakesUpdated;

  constructor(event: TotalStakesUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newTotalStakes(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveIndexUpdated extends ethereum.Event {
  get params(): TroveIndexUpdated__Params {
    return new TroveIndexUpdated__Params(this);
  }
}

export class TroveIndexUpdated__Params {
  _event: TroveIndexUpdated;

  constructor(event: TroveIndexUpdated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveLiquidated extends ethereum.Event {
  get params(): TroveLiquidated__Params {
    return new TroveLiquidated__Params(this);
  }
}

export class TroveLiquidated__Params {
  _event: TroveLiquidated;

  constructor(event: TroveLiquidated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _debt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _coll(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get operation(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class TroveSnapshotsUpdated extends ethereum.Event {
  get params(): TroveSnapshotsUpdated__Params {
    return new TroveSnapshotsUpdated__Params(this);
  }
}

export class TroveSnapshotsUpdated__Params {
  _event: TroveSnapshotsUpdated;

  constructor(event: TroveSnapshotsUpdated) {
    this._event = event;
  }

  get _unix(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TroveSnapshotsUpdated1 extends ethereum.Event {
  get params(): TroveSnapshotsUpdated1__Params {
    return new TroveSnapshotsUpdated1__Params(this);
  }
}

export class TroveSnapshotsUpdated1__Params {
  _event: TroveSnapshotsUpdated1;

  constructor(event: TroveSnapshotsUpdated1) {
    this._event = event;
  }

  get _L_ETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _L_YUSDDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveUpdated extends ethereum.Event {
  get params(): TroveUpdated__Params {
    return new TroveUpdated__Params(this);
  }
}

export class TroveUpdated__Params {
  _event: TroveUpdated;

  constructor(event: TroveUpdated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _debt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get operation(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class YETITokenAddressChanged extends ethereum.Event {
  get params(): YETITokenAddressChanged__Params {
    return new YETITokenAddressChanged__Params(this);
  }
}

export class YETITokenAddressChanged__Params {
  _event: YETITokenAddressChanged;

  constructor(event: YETITokenAddressChanged) {
    this._event = event;
  }

  get _yetiTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class YUSDTokenAddressChanged extends ethereum.Event {
  get params(): YUSDTokenAddressChanged__Params {
    return new YUSDTokenAddressChanged__Params(this);
  }
}

export class YUSDTokenAddressChanged__Params {
  _event: YUSDTokenAddressChanged;

  constructor(event: YUSDTokenAddressChanged) {
    this._event = event;
  }

  get _newYUSDTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TroveManager__getCurrentTroveStateResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: BigInt;

  constructor(value0: Array<Address>, value1: Array<BigInt>, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class TroveManager__getEntireDebtAndCollsResult {
  value0: BigInt;
  value1: Array<Address>;
  value2: Array<BigInt>;
  value3: BigInt;
  value4: Array<Address>;
  value5: Array<BigInt>;

  constructor(
    value0: BigInt,
    value1: Array<Address>,
    value2: Array<BigInt>,
    value3: BigInt,
    value4: Array<Address>,
    value5: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddressArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    return map;
  }
}

export class TroveManager__getPendingCollRewardsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class TroveManager__getTroveCollsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class TroveManager extends ethereum.SmartContract {
  static bind(address: Address): TroveManager {
    return new TroveManager("TroveManager", address);
  }

  BOOTSTRAP_PERIOD(): BigInt {
    let result = super.call(
      "BOOTSTRAP_PERIOD",
      "BOOTSTRAP_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BOOTSTRAP_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BOOTSTRAP_PERIOD",
      "BOOTSTRAP_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BORROWING_FEE_FLOOR(): BigInt {
    let result = super.call(
      "BORROWING_FEE_FLOOR",
      "BORROWING_FEE_FLOOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BORROWING_FEE_FLOOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BORROWING_FEE_FLOOR",
      "BORROWING_FEE_FLOOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CCR(): BigInt {
    let result = super.call("CCR", "CCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("CCR", "CCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DECIMAL_PRECISION(): BigInt {
    let result = super.call(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DECIMAL_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  L_YUSDDebt(param0: Address): BigInt {
    let result = super.call("L_YUSDDebt", "L_YUSDDebt(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_L_YUSDDebt(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("L_YUSDDebt", "L_YUSDDebt(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BORROWING_FEE(): BigInt {
    let result = super.call(
      "MAX_BORROWING_FEE",
      "MAX_BORROWING_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_BORROWING_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BORROWING_FEE",
      "MAX_BORROWING_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MCR(): BigInt {
    let result = super.call("MCR", "MCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MCR", "MCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINUTE_DECAY_FACTOR(): BigInt {
    let result = super.call(
      "MINUTE_DECAY_FACTOR",
      "MINUTE_DECAY_FACTOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINUTE_DECAY_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINUTE_DECAY_FACTOR",
      "MINUTE_DECAY_FACTOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_NET_DEBT(): BigInt {
    let result = super.call("MIN_NET_DEBT", "MIN_NET_DEBT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_NET_DEBT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_NET_DEBT", "MIN_NET_DEBT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  PERCENT_DIVISOR(): BigInt {
    let result = super.call(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENT_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REDEMPTION_FEE_FLOOR(): BigInt {
    let result = super.call(
      "REDEMPTION_FEE_FLOOR",
      "REDEMPTION_FEE_FLOOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REDEMPTION_FEE_FLOOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REDEMPTION_FEE_FLOOR",
      "REDEMPTION_FEE_FLOOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SECONDS_IN_ONE_MINUTE(): BigInt {
    let result = super.call(
      "SECONDS_IN_ONE_MINUTE",
      "SECONDS_IN_ONE_MINUTE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SECONDS_IN_ONE_MINUTE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SECONDS_IN_ONE_MINUTE",
      "SECONDS_IN_ONE_MINUTE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  YUSD_GAS_COMPENSATION(): BigInt {
    let result = super.call(
      "YUSD_GAS_COMPENSATION",
      "YUSD_GAS_COMPENSATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_YUSD_GAS_COMPENSATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "YUSD_GAS_COMPENSATION",
      "YUSD_GAS_COMPENSATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _100pct(): BigInt {
    let result = super.call("_100pct", "_100pct():(uint256)", []);

    return result[0].toBigInt();
  }

  try__100pct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_100pct", "_100pct():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _110pct(): BigInt {
    let result = super.call("_110pct", "_110pct():(uint256)", []);

    return result[0].toBigInt();
  }

  try__110pct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_110pct", "_110pct():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activePool(): Address {
    let result = super.call("activePool", "activePool():(address)", []);

    return result[0].toAddress();
  }

  try_activePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("activePool", "activePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addTroveOwnerToArray(_borrower: Address): BigInt {
    let result = super.call(
      "addTroveOwnerToArray",
      "addTroveOwnerToArray(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_addTroveOwnerToArray(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addTroveOwnerToArray",
      "addTroveOwnerToArray(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseRate(): BigInt {
    let result = super.call("baseRate", "baseRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseRate", "baseRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowerOperationsAddress(): Address {
    let result = super.call(
      "borrowerOperationsAddress",
      "borrowerOperationsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_borrowerOperationsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowerOperationsAddress",
      "borrowerOperationsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calcDecayedBaseRate(): BigInt {
    let result = super.call(
      "calcDecayedBaseRate",
      "calcDecayedBaseRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calcDecayedBaseRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcDecayedBaseRate",
      "calcDecayedBaseRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkRecoveryMode(): boolean {
    let result = super.call(
      "checkRecoveryMode",
      "checkRecoveryMode():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_checkRecoveryMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkRecoveryMode",
      "checkRecoveryMode():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decreaseTroveDebt(_borrower: Address, _debtDecrease: BigInt): BigInt {
    let result = super.call(
      "decreaseTroveDebt",
      "decreaseTroveDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtDecrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_decreaseTroveDebt(
    _borrower: Address,
    _debtDecrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decreaseTroveDebt",
      "decreaseTroveDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtDecrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultPool(): Address {
    let result = super.call("defaultPool", "defaultPool():(address)", []);

    return result[0].toAddress();
  }

  try_defaultPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("defaultPool", "defaultPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBorrowingFee(_YUSDDebt: BigInt): BigInt {
    let result = super.call(
      "getBorrowingFee",
      "getBorrowingFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingFee(_YUSDDebt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingFee",
      "getBorrowingFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingFeeWithDecay(_YUSDDebt: BigInt): BigInt {
    let result = super.call(
      "getBorrowingFeeWithDecay",
      "getBorrowingFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingFeeWithDecay(_YUSDDebt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingFeeWithDecay",
      "getBorrowingFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingRate(): BigInt {
    let result = super.call(
      "getBorrowingRate",
      "getBorrowingRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBorrowingRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingRate",
      "getBorrowingRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingRateWithDecay(): BigInt {
    let result = super.call(
      "getBorrowingRateWithDecay",
      "getBorrowingRateWithDecay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBorrowingRateWithDecay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingRateWithDecay",
      "getBorrowingRateWithDecay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentICR(_borrower: Address): BigInt {
    let result = super.call(
      "getCurrentICR",
      "getCurrentICR(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentICR(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentICR",
      "getCurrentICR(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentTroveState(
    _borrower: Address
  ): TroveManager__getCurrentTroveStateResult {
    let result = super.call(
      "getCurrentTroveState",
      "getCurrentTroveState(address):(address[],uint256[],uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new TroveManager__getCurrentTroveStateResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt()
    );
  }

  try_getCurrentTroveState(
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getCurrentTroveStateResult> {
    let result = super.tryCall(
      "getCurrentTroveState",
      "getCurrentTroveState(address):(address[],uint256[],uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getCurrentTroveStateResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt()
      )
    );
  }

  getEntireDebtAndColls(
    _borrower: Address
  ): TroveManager__getEntireDebtAndCollsResult {
    let result = super.call(
      "getEntireDebtAndColls",
      "getEntireDebtAndColls(address):(uint256,address[],uint256[],uint256,address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new TroveManager__getEntireDebtAndCollsResult(
      result[0].toBigInt(),
      result[1].toAddressArray(),
      result[2].toBigIntArray(),
      result[3].toBigInt(),
      result[4].toAddressArray(),
      result[5].toBigIntArray()
    );
  }

  try_getEntireDebtAndColls(
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getEntireDebtAndCollsResult> {
    let result = super.tryCall(
      "getEntireDebtAndColls",
      "getEntireDebtAndColls(address):(uint256,address[],uint256[],uint256,address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getEntireDebtAndCollsResult(
        value[0].toBigInt(),
        value[1].toAddressArray(),
        value[2].toBigIntArray(),
        value[3].toBigInt(),
        value[4].toAddressArray(),
        value[5].toBigIntArray()
      )
    );
  }

  getEntireSystemColl(): BigInt {
    let result = super.call(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemColl(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireSystemDebt(): BigInt {
    let result = super.call(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getL_Coll(_token: Address): BigInt {
    let result = super.call("getL_Coll", "getL_Coll(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_getL_Coll(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getL_Coll", "getL_Coll(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getL_YUSD(_token: Address): BigInt {
    let result = super.call("getL_YUSD", "getL_YUSD(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_getL_YUSD(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getL_YUSD", "getL_YUSD(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingCollRewards(
    _borrower: Address
  ): TroveManager__getPendingCollRewardsResult {
    let result = super.call(
      "getPendingCollRewards",
      "getPendingCollRewards(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new TroveManager__getPendingCollRewardsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getPendingCollRewards(
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getPendingCollRewardsResult> {
    let result = super.tryCall(
      "getPendingCollRewards",
      "getPendingCollRewards(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getPendingCollRewardsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getPendingYUSDDebtReward(_borrower: Address): BigInt {
    let result = super.call(
      "getPendingYUSDDebtReward",
      "getPendingYUSDDebtReward(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getPendingYUSDDebtReward(
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingYUSDDebtReward",
      "getPendingYUSDDebtReward(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionFeeWithDecay(_YUSDRedeemed: BigInt): BigInt {
    let result = super.call(
      "getRedemptionFeeWithDecay",
      "getRedemptionFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDRedeemed)]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionFeeWithDecay(
    _YUSDRedeemed: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionFeeWithDecay",
      "getRedemptionFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDRedeemed)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionRate(): BigInt {
    let result = super.call(
      "getRedemptionRate",
      "getRedemptionRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRedemptionRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionRate",
      "getRedemptionRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionRateWithDecay(): BigInt {
    let result = super.call(
      "getRedemptionRateWithDecay",
      "getRedemptionRateWithDecay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRedemptionRateWithDecay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionRateWithDecay",
      "getRedemptionRateWithDecay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardSnapshotColl(_borrower: Address, _token: Address): BigInt {
    let result = super.call(
      "getRewardSnapshotColl",
      "getRewardSnapshotColl(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRewardSnapshotColl(
    _borrower: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardSnapshotColl",
      "getRewardSnapshotColl(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardSnapshotYUSD(_borrower: Address, _token: Address): BigInt {
    let result = super.call(
      "getRewardSnapshotYUSD",
      "getRewardSnapshotYUSD(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRewardSnapshotYUSD(
    _borrower: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardSnapshotYUSD",
      "getRewardSnapshotYUSD(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTCR(): BigInt {
    let result = super.call("getTCR", "getTCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTCR", "getTCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalStake(_token: Address): BigInt {
    let result = super.call(
      "getTotalStake",
      "getTotalStake(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getTotalStake(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalStake",
      "getTotalStake(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveColls(_borrower: Address): TroveManager__getTroveCollsResult {
    let result = super.call(
      "getTroveColls",
      "getTroveColls(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new TroveManager__getTroveCollsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getTroveColls(
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getTroveCollsResult> {
    let result = super.tryCall(
      "getTroveColls",
      "getTroveColls(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getTroveCollsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getTroveDebt(_borrower: Address): BigInt {
    let result = super.call("getTroveDebt", "getTroveDebt(address):(uint256)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBigInt();
  }

  try_getTroveDebt(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveDebt",
      "getTroveDebt(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveFromTroveOwnersArray(_index: BigInt): Address {
    let result = super.call(
      "getTroveFromTroveOwnersArray",
      "getTroveFromTroveOwnersArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toAddress();
  }

  try_getTroveFromTroveOwnersArray(
    _index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTroveFromTroveOwnersArray",
      "getTroveFromTroveOwnersArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTroveOwnersCount(): BigInt {
    let result = super.call(
      "getTroveOwnersCount",
      "getTroveOwnersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTroveOwnersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveOwnersCount",
      "getTroveOwnersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveStake(_borrower: Address, _token: Address): BigInt {
    let result = super.call(
      "getTroveStake",
      "getTroveStake(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTroveStake(
    _borrower: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveStake",
      "getTroveStake(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveStatus(_borrower: Address): BigInt {
    let result = super.call(
      "getTroveStatus",
      "getTroveStatus(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getTroveStatus(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveStatus",
      "getTroveStatus(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveVC(_borrower: Address): BigInt {
    let result = super.call("getTroveVC", "getTroveVC(address):(uint256)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBigInt();
  }

  try_getTroveVC(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTroveVC", "getTroveVC(address):(uint256)", [
      ethereum.Value.fromAddress(_borrower)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasPendingRewards(_borrower: Address): boolean {
    let result = super.call(
      "hasPendingRewards",
      "hasPendingRewards(address):(bool)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBoolean();
  }

  try_hasPendingRewards(_borrower: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPendingRewards",
      "hasPendingRewards(address):(bool)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseTroveDebt(_borrower: Address, _debtIncrease: BigInt): BigInt {
    let result = super.call(
      "increaseTroveDebt",
      "increaseTroveDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtIncrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_increaseTroveDebt(
    _borrower: Address,
    _debtIncrease: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "increaseTroveDebt",
      "increaseTroveDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtIncrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTroveActive(_borrower: Address): boolean {
    let result = super.call("isTroveActive", "isTroveActive(address):(bool)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBoolean();
  }

  try_isTroveActive(_borrower: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTroveActive",
      "isTroveActive(address):(bool)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastCollError_Redistribution(param0: Address): BigInt {
    let result = super.call(
      "lastCollError_Redistribution",
      "lastCollError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastCollError_Redistribution(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCollError_Redistribution",
      "lastCollError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastFeeOperationTime(): BigInt {
    let result = super.call(
      "lastFeeOperationTime",
      "lastFeeOperationTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastFeeOperationTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFeeOperationTime",
      "lastFeeOperationTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastYUSDDebtError_Redistribution(param0: Address): BigInt {
    let result = super.call(
      "lastYUSDDebtError_Redistribution",
      "lastYUSDDebtError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastYUSDDebtError_Redistribution(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastYUSDDebtError_Redistribution",
      "lastYUSDDebtError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sYETI(): Address {
    let result = super.call("sYETI", "sYETI():(address)", []);

    return result[0].toAddress();
  }

  try_sYETI(): ethereum.CallResult<Address> {
    let result = super.tryCall("sYETI", "sYETI():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sortedTroves(): Address {
    let result = super.call("sortedTroves", "sortedTroves():(address)", []);

    return result[0].toAddress();
  }

  try_sortedTroves(): ethereum.CallResult<Address> {
    let result = super.tryCall("sortedTroves", "sortedTroves():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stabilityPool(): Address {
    let result = super.call("stabilityPool", "stabilityPool():(address)", []);

    return result[0].toAddress();
  }

  try_stabilityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stabilityPool",
      "stabilityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalCollateralSnapshot(param0: Address): BigInt {
    let result = super.call(
      "totalCollateralSnapshot",
      "totalCollateralSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalCollateralSnapshot(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateralSnapshot",
      "totalCollateralSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakes(param0: Address): BigInt {
    let result = super.call("totalStakes", "totalStakes(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalStakes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakes",
      "totalStakes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakesSnapshot(param0: Address): BigInt {
    let result = super.call(
      "totalStakesSnapshot",
      "totalStakesSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalStakesSnapshot(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakesSnapshot",
      "totalStakesSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  troveManager(): Address {
    let result = super.call("troveManager", "troveManager():(address)", []);

    return result[0].toAddress();
  }

  try_troveManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("troveManager", "troveManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  troveManagerAddress(): Address {
    let result = super.call(
      "troveManagerAddress",
      "troveManagerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_troveManagerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "troveManagerAddress",
      "troveManagerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  troveManagerLiquidationsAddress(): Address {
    let result = super.call(
      "troveManagerLiquidationsAddress",
      "troveManagerLiquidationsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_troveManagerLiquidationsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "troveManagerLiquidationsAddress",
      "troveManagerLiquidationsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  troveManagerRedemptionsAddress(): Address {
    let result = super.call(
      "troveManagerRedemptionsAddress",
      "troveManagerRedemptionsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_troveManagerRedemptionsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "troveManagerRedemptionsAddress",
      "troveManagerRedemptionsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yetiToken(): Address {
    let result = super.call("yetiToken", "yetiToken():(address)", []);

    return result[0].toAddress();
  }

  try_yetiToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("yetiToken", "yetiToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yusdToken(): Address {
    let result = super.call("yusdToken", "yusdToken():(address)", []);

    return result[0].toAddress();
  }

  try_yusdToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("yusdToken", "yusdToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddTroveOwnerToArrayCall extends ethereum.Call {
  get inputs(): AddTroveOwnerToArrayCall__Inputs {
    return new AddTroveOwnerToArrayCall__Inputs(this);
  }

  get outputs(): AddTroveOwnerToArrayCall__Outputs {
    return new AddTroveOwnerToArrayCall__Outputs(this);
  }
}

export class AddTroveOwnerToArrayCall__Inputs {
  _call: AddTroveOwnerToArrayCall;

  constructor(call: AddTroveOwnerToArrayCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTroveOwnerToArrayCall__Outputs {
  _call: AddTroveOwnerToArrayCall;

  constructor(call: AddTroveOwnerToArrayCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApplyPendingRewardsCall extends ethereum.Call {
  get inputs(): ApplyPendingRewardsCall__Inputs {
    return new ApplyPendingRewardsCall__Inputs(this);
  }

  get outputs(): ApplyPendingRewardsCall__Outputs {
    return new ApplyPendingRewardsCall__Outputs(this);
  }
}

export class ApplyPendingRewardsCall__Inputs {
  _call: ApplyPendingRewardsCall;

  constructor(call: ApplyPendingRewardsCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApplyPendingRewardsCall__Outputs {
  _call: ApplyPendingRewardsCall;

  constructor(call: ApplyPendingRewardsCall) {
    this._call = call;
  }
}

export class BatchLiquidateTrovesCall extends ethereum.Call {
  get inputs(): BatchLiquidateTrovesCall__Inputs {
    return new BatchLiquidateTrovesCall__Inputs(this);
  }

  get outputs(): BatchLiquidateTrovesCall__Outputs {
    return new BatchLiquidateTrovesCall__Outputs(this);
  }
}

export class BatchLiquidateTrovesCall__Inputs {
  _call: BatchLiquidateTrovesCall;

  constructor(call: BatchLiquidateTrovesCall) {
    this._call = call;
  }

  get _troveArray(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _liquidator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BatchLiquidateTrovesCall__Outputs {
  _call: BatchLiquidateTrovesCall;

  constructor(call: BatchLiquidateTrovesCall) {
    this._call = call;
  }
}

export class CloseTroveCall extends ethereum.Call {
  get inputs(): CloseTroveCall__Inputs {
    return new CloseTroveCall__Inputs(this);
  }

  get outputs(): CloseTroveCall__Outputs {
    return new CloseTroveCall__Outputs(this);
  }
}

export class CloseTroveCall__Inputs {
  _call: CloseTroveCall;

  constructor(call: CloseTroveCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CloseTroveCall__Outputs {
  _call: CloseTroveCall;

  constructor(call: CloseTroveCall) {
    this._call = call;
  }
}

export class CloseTroveLiquidationCall extends ethereum.Call {
  get inputs(): CloseTroveLiquidationCall__Inputs {
    return new CloseTroveLiquidationCall__Inputs(this);
  }

  get outputs(): CloseTroveLiquidationCall__Outputs {
    return new CloseTroveLiquidationCall__Outputs(this);
  }
}

export class CloseTroveLiquidationCall__Inputs {
  _call: CloseTroveLiquidationCall;

  constructor(call: CloseTroveLiquidationCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CloseTroveLiquidationCall__Outputs {
  _call: CloseTroveLiquidationCall;

  constructor(call: CloseTroveLiquidationCall) {
    this._call = call;
  }
}

export class CloseTroveRedemptionCall extends ethereum.Call {
  get inputs(): CloseTroveRedemptionCall__Inputs {
    return new CloseTroveRedemptionCall__Inputs(this);
  }

  get outputs(): CloseTroveRedemptionCall__Outputs {
    return new CloseTroveRedemptionCall__Outputs(this);
  }
}

export class CloseTroveRedemptionCall__Inputs {
  _call: CloseTroveRedemptionCall;

  constructor(call: CloseTroveRedemptionCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CloseTroveRedemptionCall__Outputs {
  _call: CloseTroveRedemptionCall;

  constructor(call: CloseTroveRedemptionCall) {
    this._call = call;
  }
}

export class CollSurplusUpdateCall extends ethereum.Call {
  get inputs(): CollSurplusUpdateCall__Inputs {
    return new CollSurplusUpdateCall__Inputs(this);
  }

  get outputs(): CollSurplusUpdateCall__Outputs {
    return new CollSurplusUpdateCall__Outputs(this);
  }
}

export class CollSurplusUpdateCall__Inputs {
  _call: CollSurplusUpdateCall;

  constructor(call: CollSurplusUpdateCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class CollSurplusUpdateCall__Outputs {
  _call: CollSurplusUpdateCall;

  constructor(call: CollSurplusUpdateCall) {
    this._call = call;
  }
}

export class DecayBaseRateFromBorrowingCall extends ethereum.Call {
  get inputs(): DecayBaseRateFromBorrowingCall__Inputs {
    return new DecayBaseRateFromBorrowingCall__Inputs(this);
  }

  get outputs(): DecayBaseRateFromBorrowingCall__Outputs {
    return new DecayBaseRateFromBorrowingCall__Outputs(this);
  }
}

export class DecayBaseRateFromBorrowingCall__Inputs {
  _call: DecayBaseRateFromBorrowingCall;

  constructor(call: DecayBaseRateFromBorrowingCall) {
    this._call = call;
  }
}

export class DecayBaseRateFromBorrowingCall__Outputs {
  _call: DecayBaseRateFromBorrowingCall;

  constructor(call: DecayBaseRateFromBorrowingCall) {
    this._call = call;
  }
}

export class DecreaseTroveDebtCall extends ethereum.Call {
  get inputs(): DecreaseTroveDebtCall__Inputs {
    return new DecreaseTroveDebtCall__Inputs(this);
  }

  get outputs(): DecreaseTroveDebtCall__Outputs {
    return new DecreaseTroveDebtCall__Outputs(this);
  }
}

export class DecreaseTroveDebtCall__Inputs {
  _call: DecreaseTroveDebtCall;

  constructor(call: DecreaseTroveDebtCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _debtDecrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseTroveDebtCall__Outputs {
  _call: DecreaseTroveDebtCall;

  constructor(call: DecreaseTroveDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseTroveDebtCall extends ethereum.Call {
  get inputs(): IncreaseTroveDebtCall__Inputs {
    return new IncreaseTroveDebtCall__Inputs(this);
  }

  get outputs(): IncreaseTroveDebtCall__Outputs {
    return new IncreaseTroveDebtCall__Outputs(this);
  }
}

export class IncreaseTroveDebtCall__Inputs {
  _call: IncreaseTroveDebtCall;

  constructor(call: IncreaseTroveDebtCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _debtIncrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseTroveDebtCall__Outputs {
  _call: IncreaseTroveDebtCall;

  constructor(call: IncreaseTroveDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class MovePendingTroveRewardsToActivePoolCall extends ethereum.Call {
  get inputs(): MovePendingTroveRewardsToActivePoolCall__Inputs {
    return new MovePendingTroveRewardsToActivePoolCall__Inputs(this);
  }

  get outputs(): MovePendingTroveRewardsToActivePoolCall__Outputs {
    return new MovePendingTroveRewardsToActivePoolCall__Outputs(this);
  }
}

export class MovePendingTroveRewardsToActivePoolCall__Inputs {
  _call: MovePendingTroveRewardsToActivePoolCall;

  constructor(call: MovePendingTroveRewardsToActivePoolCall) {
    this._call = call;
  }

  get _activePool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _defaultPool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _YUSD(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _borrower(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class MovePendingTroveRewardsToActivePoolCall__Outputs {
  _call: MovePendingTroveRewardsToActivePoolCall;

  constructor(call: MovePendingTroveRewardsToActivePoolCall) {
    this._call = call;
  }
}

export class RedeemCollateralCall extends ethereum.Call {
  get inputs(): RedeemCollateralCall__Inputs {
    return new RedeemCollateralCall__Inputs(this);
  }

  get outputs(): RedeemCollateralCall__Outputs {
    return new RedeemCollateralCall__Outputs(this);
  }
}

export class RedeemCollateralCall__Inputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get _YUSDamount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _YUSDMaxFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _firstRedemptionHint(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _upperPartialRedemptionHint(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _lowerPartialRedemptionHint(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _partialRedemptionHintICR(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxIterations(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RedeemCollateralCall__Outputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }
}

export class RedistributeDebtAndCollCall extends ethereum.Call {
  get inputs(): RedistributeDebtAndCollCall__Inputs {
    return new RedistributeDebtAndCollCall__Inputs(this);
  }

  get outputs(): RedistributeDebtAndCollCall__Outputs {
    return new RedistributeDebtAndCollCall__Outputs(this);
  }
}

export class RedistributeDebtAndCollCall__Inputs {
  _call: RedistributeDebtAndCollCall;

  constructor(call: RedistributeDebtAndCollCall) {
    this._call = call;
  }

  get _activePool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _defaultPool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _debt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class RedistributeDebtAndCollCall__Outputs {
  _call: RedistributeDebtAndCollCall;

  constructor(call: RedistributeDebtAndCollCall) {
    this._call = call;
  }
}

export class RemoveStakeCall extends ethereum.Call {
  get inputs(): RemoveStakeCall__Inputs {
    return new RemoveStakeCall__Inputs(this);
  }

  get outputs(): RemoveStakeCall__Outputs {
    return new RemoveStakeCall__Outputs(this);
  }
}

export class RemoveStakeCall__Inputs {
  _call: RemoveStakeCall;

  constructor(call: RemoveStakeCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStakeCall__Outputs {
  _call: RemoveStakeCall;

  constructor(call: RemoveStakeCall) {
    this._call = call;
  }
}

export class RemoveStakeTLRCall extends ethereum.Call {
  get inputs(): RemoveStakeTLRCall__Inputs {
    return new RemoveStakeTLRCall__Inputs(this);
  }

  get outputs(): RemoveStakeTLRCall__Outputs {
    return new RemoveStakeTLRCall__Outputs(this);
  }
}

export class RemoveStakeTLRCall__Inputs {
  _call: RemoveStakeTLRCall;

  constructor(call: RemoveStakeTLRCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStakeTLRCall__Outputs {
  _call: RemoveStakeTLRCall;

  constructor(call: RemoveStakeTLRCall) {
    this._call = call;
  }
}

export class RemoveStakeTMRCall extends ethereum.Call {
  get inputs(): RemoveStakeTMRCall__Inputs {
    return new RemoveStakeTMRCall__Inputs(this);
  }

  get outputs(): RemoveStakeTMRCall__Outputs {
    return new RemoveStakeTMRCall__Outputs(this);
  }
}

export class RemoveStakeTMRCall__Inputs {
  _call: RemoveStakeTMRCall;

  constructor(call: RemoveStakeTMRCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStakeTMRCall__Outputs {
  _call: RemoveStakeTMRCall;

  constructor(call: RemoveStakeTMRCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _borrowerOperationsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _activePoolAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _defaultPoolAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stabilityPoolAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _gasPoolAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _collSurplusPoolAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _yusdTokenAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _sortedTrovesAddress(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _yetiTokenAddress(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _sYETIAddress(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _whitelistAddress(): Address {
    return this._call.inputValues[10].value.toAddress();
  }

  get _troveManagerRedemptionsAddress(): Address {
    return this._call.inputValues[11].value.toAddress();
  }

  get _troveManagerLiquidationsAddress(): Address {
    return this._call.inputValues[12].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetTroveStatusCall extends ethereum.Call {
  get inputs(): SetTroveStatusCall__Inputs {
    return new SetTroveStatusCall__Inputs(this);
  }

  get outputs(): SetTroveStatusCall__Outputs {
    return new SetTroveStatusCall__Outputs(this);
  }
}

export class SetTroveStatusCall__Inputs {
  _call: SetTroveStatusCall;

  constructor(call: SetTroveStatusCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _num(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTroveStatusCall__Outputs {
  _call: SetTroveStatusCall;

  constructor(call: SetTroveStatusCall) {
    this._call = call;
  }
}

export class UpdateBaseRateCall extends ethereum.Call {
  get inputs(): UpdateBaseRateCall__Inputs {
    return new UpdateBaseRateCall__Inputs(this);
  }

  get outputs(): UpdateBaseRateCall__Outputs {
    return new UpdateBaseRateCall__Outputs(this);
  }
}

export class UpdateBaseRateCall__Inputs {
  _call: UpdateBaseRateCall;

  constructor(call: UpdateBaseRateCall) {
    this._call = call;
  }

  get newBaseRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateBaseRateCall__Outputs {
  _call: UpdateBaseRateCall;

  constructor(call: UpdateBaseRateCall) {
    this._call = call;
  }
}

export class UpdateStakeAndTotalStakesCall extends ethereum.Call {
  get inputs(): UpdateStakeAndTotalStakesCall__Inputs {
    return new UpdateStakeAndTotalStakesCall__Inputs(this);
  }

  get outputs(): UpdateStakeAndTotalStakesCall__Outputs {
    return new UpdateStakeAndTotalStakesCall__Outputs(this);
  }
}

export class UpdateStakeAndTotalStakesCall__Inputs {
  _call: UpdateStakeAndTotalStakesCall;

  constructor(call: UpdateStakeAndTotalStakesCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateStakeAndTotalStakesCall__Outputs {
  _call: UpdateStakeAndTotalStakesCall;

  constructor(call: UpdateStakeAndTotalStakesCall) {
    this._call = call;
  }
}

export class UpdateSystemSnapshots_excludeCollRemainderCall extends ethereum.Call {
  get inputs(): UpdateSystemSnapshots_excludeCollRemainderCall__Inputs {
    return new UpdateSystemSnapshots_excludeCollRemainderCall__Inputs(this);
  }

  get outputs(): UpdateSystemSnapshots_excludeCollRemainderCall__Outputs {
    return new UpdateSystemSnapshots_excludeCollRemainderCall__Outputs(this);
  }
}

export class UpdateSystemSnapshots_excludeCollRemainderCall__Inputs {
  _call: UpdateSystemSnapshots_excludeCollRemainderCall;

  constructor(call: UpdateSystemSnapshots_excludeCollRemainderCall) {
    this._call = call;
  }

  get _activePool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateSystemSnapshots_excludeCollRemainderCall__Outputs {
  _call: UpdateSystemSnapshots_excludeCollRemainderCall;

  constructor(call: UpdateSystemSnapshots_excludeCollRemainderCall) {
    this._call = call;
  }
}

export class UpdateTroveCollCall extends ethereum.Call {
  get inputs(): UpdateTroveCollCall__Inputs {
    return new UpdateTroveCollCall__Inputs(this);
  }

  get outputs(): UpdateTroveCollCall__Outputs {
    return new UpdateTroveCollCall__Outputs(this);
  }
}

export class UpdateTroveCollCall__Inputs {
  _call: UpdateTroveCollCall;

  constructor(call: UpdateTroveCollCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateTroveCollCall__Outputs {
  _call: UpdateTroveCollCall;

  constructor(call: UpdateTroveCollCall) {
    this._call = call;
  }
}

export class UpdateTroveCollTMRCall extends ethereum.Call {
  get inputs(): UpdateTroveCollTMRCall__Inputs {
    return new UpdateTroveCollTMRCall__Inputs(this);
  }

  get outputs(): UpdateTroveCollTMRCall__Outputs {
    return new UpdateTroveCollTMRCall__Outputs(this);
  }
}

export class UpdateTroveCollTMRCall__Inputs {
  _call: UpdateTroveCollTMRCall;

  constructor(call: UpdateTroveCollTMRCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateTroveCollTMRCall__Outputs {
  _call: UpdateTroveCollTMRCall;

  constructor(call: UpdateTroveCollTMRCall) {
    this._call = call;
  }
}

export class UpdateTroveDebtCall extends ethereum.Call {
  get inputs(): UpdateTroveDebtCall__Inputs {
    return new UpdateTroveDebtCall__Inputs(this);
  }

  get outputs(): UpdateTroveDebtCall__Outputs {
    return new UpdateTroveDebtCall__Outputs(this);
  }
}

export class UpdateTroveDebtCall__Inputs {
  _call: UpdateTroveDebtCall;

  constructor(call: UpdateTroveDebtCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get debt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateTroveDebtCall__Outputs {
  _call: UpdateTroveDebtCall;

  constructor(call: UpdateTroveDebtCall) {
    this._call = call;
  }
}

export class UpdateTroveRewardSnapshotsCall extends ethereum.Call {
  get inputs(): UpdateTroveRewardSnapshotsCall__Inputs {
    return new UpdateTroveRewardSnapshotsCall__Inputs(this);
  }

  get outputs(): UpdateTroveRewardSnapshotsCall__Outputs {
    return new UpdateTroveRewardSnapshotsCall__Outputs(this);
  }
}

export class UpdateTroveRewardSnapshotsCall__Inputs {
  _call: UpdateTroveRewardSnapshotsCall;

  constructor(call: UpdateTroveRewardSnapshotsCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTroveRewardSnapshotsCall__Outputs {
  _call: UpdateTroveRewardSnapshotsCall;

  constructor(call: UpdateTroveRewardSnapshotsCall) {
    this._call = call;
  }
}

export class UpdateTrovesCall extends ethereum.Call {
  get inputs(): UpdateTrovesCall__Inputs {
    return new UpdateTrovesCall__Inputs(this);
  }

  get outputs(): UpdateTrovesCall__Outputs {
    return new UpdateTrovesCall__Outputs(this);
  }
}

export class UpdateTrovesCall__Inputs {
  _call: UpdateTrovesCall;

  constructor(call: UpdateTrovesCall) {
    this._call = call;
  }

  get _borrowers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _lowerHints(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _upperHints(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class UpdateTrovesCall__Outputs {
  _call: UpdateTrovesCall;

  constructor(call: UpdateTrovesCall) {
    this._call = call;
  }
}
