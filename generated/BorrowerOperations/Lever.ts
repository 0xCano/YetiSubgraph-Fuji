// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RouteSet extends ethereum.Event {
  get params(): RouteSet__Params {
    return new RouteSet__Params(this);
  }
}

export class RouteSet__Params {
  _event: RouteSet;

  constructor(event: RouteSet) {
    this._event = event;
  }

  get fromToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get path(): Array<RouteSetPathStruct> {
    return this._event.parameters[2].value.toTupleArray<RouteSetPathStruct>();
  }
}

export class RouteSetPathStruct extends ethereum.Tuple {
  get protocolSwapAddress(): Address {
    return this[0].toAddress();
  }

  get nodeType(): BigInt {
    return this[1].toBigInt();
  }

  get tokenIn(): Address {
    return this[2].toAddress();
  }

  get tokenOut(): Address {
    return this[3].toAddress();
  }

  get _misc(): BigInt {
    return this[4].toBigInt();
  }

  get _in(): BigInt {
    return this[5].toBigInt();
  }

  get _out(): BigInt {
    return this[6].toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get startingTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get endingTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get minSwapAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get actualOut(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Lever__routesResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromSignedBigInt(this.value6));
    return map;
  }
}

export class Lever extends ethereum.SmartContract {
  static bind(address: Address): Lever {
    return new Lever("Lever", address);
  }

  aaveLendingPool(): Address {
    let result = super.call(
      "aaveLendingPool",
      "aaveLendingPool():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_aaveLendingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aaveLendingPool",
      "aaveLendingPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveLendingPoolV3(): Address {
    let result = super.call(
      "aaveLendingPoolV3",
      "aaveLendingPoolV3():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_aaveLendingPoolV3(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aaveLendingPoolV3",
      "aaveLendingPoolV3():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fullTx(
    _startingTokenAddress: Address,
    _endingTokenAddress: Address,
    _amount: BigInt,
    _minSwapAmount: BigInt
  ): BigInt {
    let result = super.call(
      "fullTx",
      "fullTx(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_startingTokenAddress),
        ethereum.Value.fromAddress(_endingTokenAddress),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minSwapAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_fullTx(
    _startingTokenAddress: Address,
    _endingTokenAddress: Address,
    _amount: BigInt,
    _minSwapAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fullTx",
      "fullTx(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_startingTokenAddress),
        ethereum.Value.fromAddress(_endingTokenAddress),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minSwapAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  route(
    _toUser: Address,
    _startingTokenAddress: Address,
    _endingTokenAddress: Address,
    _amount: BigInt,
    _minSwapAmount: BigInt
  ): BigInt {
    let result = super.call(
      "route",
      "route(address,address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_toUser),
        ethereum.Value.fromAddress(_startingTokenAddress),
        ethereum.Value.fromAddress(_endingTokenAddress),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minSwapAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_route(
    _toUser: Address,
    _startingTokenAddress: Address,
    _endingTokenAddress: Address,
    _amount: BigInt,
    _minSwapAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "route",
      "route(address,address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_toUser),
        ethereum.Value.fromAddress(_startingTokenAddress),
        ethereum.Value.fromAddress(_endingTokenAddress),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minSwapAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  routes(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): Lever__routesResult {
    let result = super.call(
      "routes",
      "routes(address,address,uint256):(address,uint256,address,address,int128,int128,int128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new Lever__routesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_routes(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Lever__routesResult> {
    let result = super.tryCall(
      "routes",
      "routes(address,address,uint256):(address,uint256,address,address,int128,int128,int128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lever__routesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  traderJoeRouter(): Address {
    let result = super.call(
      "traderJoeRouter",
      "traderJoeRouter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_traderJoeRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "traderJoeRouter",
      "traderJoeRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unRoute(
    _toUser: Address,
    _startingTokenAddress: Address,
    _endingTokenAddress: Address,
    _amount: BigInt,
    _minSwapAmount: BigInt
  ): BigInt {
    let result = super.call(
      "unRoute",
      "unRoute(address,address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_toUser),
        ethereum.Value.fromAddress(_startingTokenAddress),
        ethereum.Value.fromAddress(_endingTokenAddress),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minSwapAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_unRoute(
    _toUser: Address,
    _startingTokenAddress: Address,
    _endingTokenAddress: Address,
    _amount: BigInt,
    _minSwapAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unRoute",
      "unRoute(address,address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_toUser),
        ethereum.Value.fromAddress(_startingTokenAddress),
        ethereum.Value.fromAddress(_endingTokenAddress),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minSwapAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class FullTxCall extends ethereum.Call {
  get inputs(): FullTxCall__Inputs {
    return new FullTxCall__Inputs(this);
  }

  get outputs(): FullTxCall__Outputs {
    return new FullTxCall__Outputs(this);
  }
}

export class FullTxCall__Inputs {
  _call: FullTxCall;

  constructor(call: FullTxCall) {
    this._call = call;
  }

  get _startingTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _endingTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minSwapAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class FullTxCall__Outputs {
  _call: FullTxCall;

  constructor(call: FullTxCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RouteCall extends ethereum.Call {
  get inputs(): RouteCall__Inputs {
    return new RouteCall__Inputs(this);
  }

  get outputs(): RouteCall__Outputs {
    return new RouteCall__Outputs(this);
  }
}

export class RouteCall__Inputs {
  _call: RouteCall;

  constructor(call: RouteCall) {
    this._call = call;
  }

  get _toUser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _startingTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _endingTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minSwapAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RouteCall__Outputs {
  _call: RouteCall;

  constructor(call: RouteCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetAAVECall extends ethereum.Call {
  get inputs(): SetAAVECall__Inputs {
    return new SetAAVECall__Inputs(this);
  }

  get outputs(): SetAAVECall__Outputs {
    return new SetAAVECall__Outputs(this);
  }
}

export class SetAAVECall__Inputs {
  _call: SetAAVECall;

  constructor(call: SetAAVECall) {
    this._call = call;
  }

  get _aaveLendingPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _aaveLendingPoolV3(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetAAVECall__Outputs {
  _call: SetAAVECall;

  constructor(call: SetAAVECall) {
    this._call = call;
  }
}

export class SetApprovalsCall extends ethereum.Call {
  get inputs(): SetApprovalsCall__Inputs {
    return new SetApprovalsCall__Inputs(this);
  }

  get outputs(): SetApprovalsCall__Outputs {
    return new SetApprovalsCall__Outputs(this);
  }
}

export class SetApprovalsCall__Inputs {
  _call: SetApprovalsCall;

  constructor(call: SetApprovalsCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _who(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetApprovalsCall__Outputs {
  _call: SetApprovalsCall;

  constructor(call: SetApprovalsCall) {
    this._call = call;
  }
}

export class SetJoeRouterCall extends ethereum.Call {
  get inputs(): SetJoeRouterCall__Inputs {
    return new SetJoeRouterCall__Inputs(this);
  }

  get outputs(): SetJoeRouterCall__Outputs {
    return new SetJoeRouterCall__Outputs(this);
  }
}

export class SetJoeRouterCall__Inputs {
  _call: SetJoeRouterCall;

  constructor(call: SetJoeRouterCall) {
    this._call = call;
  }

  get _traderJoeRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetJoeRouterCall__Outputs {
  _call: SetJoeRouterCall;

  constructor(call: SetJoeRouterCall) {
    this._call = call;
  }
}

export class SetRouteCall extends ethereum.Call {
  get inputs(): SetRouteCall__Inputs {
    return new SetRouteCall__Inputs(this);
  }

  get outputs(): SetRouteCall__Outputs {
    return new SetRouteCall__Outputs(this);
  }
}

export class SetRouteCall__Inputs {
  _call: SetRouteCall;

  constructor(call: SetRouteCall) {
    this._call = call;
  }

  get _fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _path(): Array<SetRouteCall_pathStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SetRouteCall_pathStruct
    >();
  }
}

export class SetRouteCall__Outputs {
  _call: SetRouteCall;

  constructor(call: SetRouteCall) {
    this._call = call;
  }
}

export class SetRouteCall_pathStruct extends ethereum.Tuple {
  get protocolSwapAddress(): Address {
    return this[0].toAddress();
  }

  get nodeType(): BigInt {
    return this[1].toBigInt();
  }

  get tokenIn(): Address {
    return this[2].toAddress();
  }

  get tokenOut(): Address {
    return this[3].toAddress();
  }

  get _misc(): BigInt {
    return this[4].toBigInt();
  }

  get _in(): BigInt {
    return this[5].toBigInt();
  }

  get _out(): BigInt {
    return this[6].toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnRouteCall extends ethereum.Call {
  get inputs(): UnRouteCall__Inputs {
    return new UnRouteCall__Inputs(this);
  }

  get outputs(): UnRouteCall__Outputs {
    return new UnRouteCall__Outputs(this);
  }
}

export class UnRouteCall__Inputs {
  _call: UnRouteCall;

  constructor(call: UnRouteCall) {
    this._call = call;
  }

  get _toUser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _startingTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _endingTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minSwapAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UnRouteCall__Outputs {
  _call: UnRouteCall;

  constructor(call: UnRouteCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
