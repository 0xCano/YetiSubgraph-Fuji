// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RewarderStatusUpdate extends ethereum.Event {
  get params(): RewarderStatusUpdate__Params {
    return new RewarderStatusUpdate__Params(this);
  }
}

export class RewarderStatusUpdate__Params {
  _event: RewarderStatusUpdate;

  constructor(event: RewarderStatusUpdate) {
    this._event = event;
  }

  get _rewarder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _updatable(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class UpdatedWhitelistedContracts extends ethereum.Event {
  get params(): UpdatedWhitelistedContracts__Params {
    return new UpdatedWhitelistedContracts__Params(this);
  }
}

export class UpdatedWhitelistedContracts__Params {
  _event: UpdatedWhitelistedContracts;

  constructor(event: UpdatedWhitelistedContracts) {
    this._event = event;
  }

  get _contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _isWhitelisted(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class UserUpdate extends ethereum.Event {
  get params(): UserUpdate__Params {
    return new UserUpdate__Params(this);
  }
}

export class UserUpdate__Params {
  _event: UserUpdate;

  constructor(event: UserUpdate) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _isStakeIncrease(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get _stakeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class veYETI extends ethereum.SmartContract {
  static bind(address: Address): veYETI {
    return new veYETI("veYETI", address);
  }

  accumulationRate(): BigInt {
    let result = super.call(
      "accumulationRate",
      "accumulationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accumulationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accumulationRate",
      "accumulationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emitter(): Address {
    let result = super.call("emitter", "emitter():(address)", []);

    return result[0].toAddress();
  }

  try_emitter(): ethereum.CallResult<Address> {
    let result = super.tryCall("emitter", "emitter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAccumulationRate(): BigInt {
    let result = super.call(
      "getAccumulationRate",
      "getAccumulationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAccumulationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccumulationRate",
      "getAccumulationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalVeYeti(_user: Address): BigInt {
    let result = super.call(
      "getTotalVeYeti",
      "getTotalVeYeti(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getTotalVeYeti(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalVeYeti",
      "getTotalVeYeti(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalYeti(_user: Address): BigInt {
    let result = super.call("getTotalYeti", "getTotalYeti(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_getTotalYeti(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalYeti",
      "getTotalYeti(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUpdatableRewarders(): Array<Address> {
    let result = super.call(
      "getUpdatableRewarders",
      "getUpdatableRewarders():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getUpdatableRewarders(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getUpdatableRewarders",
      "getUpdatableRewarders():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUserYetiOnRewarder(_user: Address, _rewarder: Address): BigInt {
    let result = super.call(
      "getUserYetiOnRewarder",
      "getUserYetiOnRewarder(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_rewarder)]
    );

    return result[0].toBigInt();
  }

  try_getUserYetiOnRewarder(
    _user: Address,
    _rewarder: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserYetiOnRewarder",
      "getUserYetiOnRewarder(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_rewarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVeYetiOnRewarder(_user: Address, _rewarder: Address): BigInt {
    let result = super.call(
      "getVeYetiOnRewarder",
      "getVeYetiOnRewarder(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_rewarder)]
    );

    return result[0].toBigInt();
  }

  try_getVeYetiOnRewarder(
    _user: Address,
    _rewarder: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVeYetiOnRewarder",
      "getVeYetiOnRewarder(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_rewarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalYeti(): BigInt {
    let result = super.call("totalYeti", "totalYeti():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalYeti(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalYeti", "totalYeti():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updatableRewarders(param0: BigInt): Address {
    let result = super.call(
      "updatableRewarders",
      "updatableRewarders(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_updatableRewarders(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "updatableRewarders",
      "updatableRewarders(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yetiToken(): Address {
    let result = super.call("yetiToken", "yetiToken():(address)", []);

    return result[0].toAddress();
  }

  try_yetiToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("yetiToken", "yetiToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddUpdatableRewarderCall extends ethereum.Call {
  get inputs(): AddUpdatableRewarderCall__Inputs {
    return new AddUpdatableRewarderCall__Inputs(this);
  }

  get outputs(): AddUpdatableRewarderCall__Outputs {
    return new AddUpdatableRewarderCall__Outputs(this);
  }
}

export class AddUpdatableRewarderCall__Inputs {
  _call: AddUpdatableRewarderCall;

  constructor(call: AddUpdatableRewarderCall) {
    this._call = call;
  }

  get _rewarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddUpdatableRewarderCall__Outputs {
  _call: AddUpdatableRewarderCall;

  constructor(call: AddUpdatableRewarderCall) {
    this._call = call;
  }
}

export class NotifyAllRewardersCall extends ethereum.Call {
  get inputs(): NotifyAllRewardersCall__Inputs {
    return new NotifyAllRewardersCall__Inputs(this);
  }

  get outputs(): NotifyAllRewardersCall__Outputs {
    return new NotifyAllRewardersCall__Outputs(this);
  }
}

export class NotifyAllRewardersCall__Inputs {
  _call: NotifyAllRewardersCall;

  constructor(call: NotifyAllRewardersCall) {
    this._call = call;
  }
}

export class NotifyAllRewardersCall__Outputs {
  _call: NotifyAllRewardersCall;

  constructor(call: NotifyAllRewardersCall) {
    this._call = call;
  }
}

export class NotifyRewardersCall extends ethereum.Call {
  get inputs(): NotifyRewardersCall__Inputs {
    return new NotifyRewardersCall__Inputs(this);
  }

  get outputs(): NotifyRewardersCall__Outputs {
    return new NotifyRewardersCall__Outputs(this);
  }
}

export class NotifyRewardersCall__Inputs {
  _call: NotifyRewardersCall;

  constructor(call: NotifyRewardersCall) {
    this._call = call;
  }

  get rewarders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class NotifyRewardersCall__Outputs {
  _call: NotifyRewardersCall;

  constructor(call: NotifyRewardersCall) {
    this._call = call;
  }
}

export class RemoveUpdatableRewarderCall extends ethereum.Call {
  get inputs(): RemoveUpdatableRewarderCall__Inputs {
    return new RemoveUpdatableRewarderCall__Inputs(this);
  }

  get outputs(): RemoveUpdatableRewarderCall__Outputs {
    return new RemoveUpdatableRewarderCall__Outputs(this);
  }
}

export class RemoveUpdatableRewarderCall__Inputs {
  _call: RemoveUpdatableRewarderCall;

  constructor(call: RemoveUpdatableRewarderCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveUpdatableRewarderCall__Outputs {
  _call: RemoveUpdatableRewarderCall;

  constructor(call: RemoveUpdatableRewarderCall) {
    this._call = call;
  }
}

export class SetEmitterCall extends ethereum.Call {
  get inputs(): SetEmitterCall__Inputs {
    return new SetEmitterCall__Inputs(this);
  }

  get outputs(): SetEmitterCall__Outputs {
    return new SetEmitterCall__Outputs(this);
  }
}

export class SetEmitterCall__Inputs {
  _call: SetEmitterCall;

  constructor(call: SetEmitterCall) {
    this._call = call;
  }

  get _emitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEmitterCall__Outputs {
  _call: SetEmitterCall;

  constructor(call: SetEmitterCall) {
    this._call = call;
  }
}

export class SetupCall extends ethereum.Call {
  get inputs(): SetupCall__Inputs {
    return new SetupCall__Inputs(this);
  }

  get outputs(): SetupCall__Outputs {
    return new SetupCall__Outputs(this);
  }
}

export class SetupCall__Inputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }

  get _yeti(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _yetiController(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _accumulationRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetupCall__Outputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get _yetiAdjustments(): Array<UpdateCall_yetiAdjustmentsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      UpdateCall_yetiAdjustmentsStruct
    >();
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall_yetiAdjustmentsStruct extends ethereum.Tuple {
  get rewarder(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get isIncrease(): boolean {
    return this[2].toBoolean();
  }
}

export class UpdateContractControllerCall extends ethereum.Call {
  get inputs(): UpdateContractControllerCall__Inputs {
    return new UpdateContractControllerCall__Inputs(this);
  }

  get outputs(): UpdateContractControllerCall__Outputs {
    return new UpdateContractControllerCall__Outputs(this);
  }
}

export class UpdateContractControllerCall__Inputs {
  _call: UpdateContractControllerCall;

  constructor(call: UpdateContractControllerCall) {
    this._call = call;
  }

  get _newcontractController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateContractControllerCall__Outputs {
  _call: UpdateContractControllerCall;

  constructor(call: UpdateContractControllerCall) {
    this._call = call;
  }
}

export class UpdateWhitelistedCallersCall extends ethereum.Call {
  get inputs(): UpdateWhitelistedCallersCall__Inputs {
    return new UpdateWhitelistedCallersCall__Inputs(this);
  }

  get outputs(): UpdateWhitelistedCallersCall__Outputs {
    return new UpdateWhitelistedCallersCall__Outputs(this);
  }
}

export class UpdateWhitelistedCallersCall__Inputs {
  _call: UpdateWhitelistedCallersCall;

  constructor(call: UpdateWhitelistedCallersCall) {
    this._call = call;
  }

  get _contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isWhitelisted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateWhitelistedCallersCall__Outputs {
  _call: UpdateWhitelistedCallersCall;

  constructor(call: UpdateWhitelistedCallersCall) {
    this._call = call;
  }
}
